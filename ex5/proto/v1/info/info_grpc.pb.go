// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/v1/info/info.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteClient is the client API for Route service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteClient interface {
	GetInfo(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error)
	ListInfo(ctx context.Context, in *Content, opts ...grpc.CallOption) (Route_ListInfoClient, error)
}

type routeClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteClient(cc grpc.ClientConnInterface) RouteClient {
	return &routeClient{cc}
}

func (c *routeClient) GetInfo(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/v1.Route/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) ListInfo(ctx context.Context, in *Content, opts ...grpc.CallOption) (Route_ListInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Route_ServiceDesc.Streams[0], "/v1.Route/ListInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeListInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Route_ListInfoClient interface {
	Recv() (*Content, error)
	grpc.ClientStream
}

type routeListInfoClient struct {
	grpc.ClientStream
}

func (x *routeListInfoClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteServer is the server API for Route service.
// All implementations must embed UnimplementedRouteServer
// for forward compatibility
type RouteServer interface {
	GetInfo(context.Context, *Content) (*Content, error)
	ListInfo(*Content, Route_ListInfoServer) error
	mustEmbedUnimplementedRouteServer()
}

// UnimplementedRouteServer must be embedded to have forward compatible implementations.
type UnimplementedRouteServer struct {
}

func (UnimplementedRouteServer) GetInfo(context.Context, *Content) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedRouteServer) ListInfo(*Content, Route_ListInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInfo not implemented")
}
func (UnimplementedRouteServer) mustEmbedUnimplementedRouteServer() {}

// UnsafeRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServer will
// result in compilation errors.
type UnsafeRouteServer interface {
	mustEmbedUnimplementedRouteServer()
}

func RegisterRouteServer(s grpc.ServiceRegistrar, srv RouteServer) {
	s.RegisterService(&Route_ServiceDesc, srv)
}

func _Route_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Route/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).GetInfo(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_ListInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Content)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteServer).ListInfo(m, &routeListInfoServer{stream})
}

type Route_ListInfoServer interface {
	Send(*Content) error
	grpc.ServerStream
}

type routeListInfoServer struct {
	grpc.ServerStream
}

func (x *routeListInfoServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

// Route_ServiceDesc is the grpc.ServiceDesc for Route service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Route_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Route",
	HandlerType: (*RouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Route_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListInfo",
			Handler:       _Route_ListInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/v1/info/info.proto",
}
